@using Oqtane.Blogs.Services
@using Oqtane.Blogs.Models
@using Oqtane.Blogs.Shared
@namespace Oqtane.Blogs
@inherits ModuleBase
@inject IBlogCommentService BlogCommentService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Comments> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (_comments == null)
{
    <p><em>@SharedLocalizer["Loading"]</em></p>
}
else
{
    <div class="row justify-content-center mb-3">
        <div class="text-center">
            <div class="form-check form-check-inline">
                <select id="published" class="form-select" value="@_published" @onchange="(e => PublishedChanged(e))">
                    <option value="True">@Localizer["Published"] @Localizer["Comments"]</option>
                    <option value="False">@Localizer["Unpublished"] @Localizer["Comments"]</option>
                </select>
            </div>
        </div>
    </div>

    @if (_comments.Count == 0)
    {
        <p>@Localizer["NoComments"]</p>
    }
    else
    {
        <Pager Items="@_comments">
            <Header>
                <th style="width: 1px;">&nbsp;</th>
                <th style="width: 1px;">&nbsp;</th>
                <th style="width: 1px;">&nbsp;</th>
                <th>@Localizer["Title"]</th>
                <th>@Localizer["Author"]</th>
                <th>@Localizer["Submitted"]</th>
            </Header>
            <Row>
                <td><button type="button" class="btn btn-primary" @onclick="@(() => EditComment(context))">@SharedLocalizer["Edit"]</button></td>
                <td><ActionDialog Header="Delete Comment" Message="@Localizer["DeleteComment.Message"]" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await DeleteComment(context))" ResourceKey="DeleteComment" /></td>
                <td><button type="button" class="btn btn-secondary" @onclick="@(async () => await UpdateComment(context))">@(context.IsPublished ? Localizer["Unpublish"] : Localizer["Publish"])</button></td>
                <td>@context.Blog.Title</td>
                <td>@context.Name &lt;@context.Email&gt;</td>
                <td>@context.CreatedOn.ToShortDateString()</td>
            </Row>
            <Detail>
                <td colspan="3">&nbsp;</td>
                <td colspan="3">@((MarkupString)context.Comment)</td>
            </Detail>
        </Pager>
        @if (_published == "False")
        {
            <br />
            <button type="button" class="btn btn-danger" @onclick="DeleteAll">@Localizer["DeleteAll"]</button>
        }
    }
}

@code {
    private string _published = "False";
    private List<BlogComment> _comments;

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;
    public override string Title => "Manage Comments";

    protected override async Task OnParametersSetAsync()
    {
        await GetComments();
    }

    private async Task GetComments()
    {
        _comments = await BlogCommentService.GetBlogCommentsAsync(-1, ModuleState.ModuleId, bool.Parse(_published));
    }

    private async Task PublishedChanged(ChangeEventArgs eventArgs)
    {
        _published = (string)eventArgs.Value;
        await GetComments();
    }

    private async Task UpdateComment(BlogComment comment)
    {
        try
        {
            if (comment.IsPublished)
            {
                comment.IsPublished = false;
            }
            else
            {
                comment.IsPublished = true;
            }
            await BlogCommentService.UpdateBlogCommentAsync(comment, ModuleState.ModuleId);
            await logger.LogInformation("Blog Comment Updated {BlogComment}", comment);
            await GetComments();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Updating Blog Comment {BlogComment} {Error}", comment, ex.Message);
            AddModuleMessage(Localizer["Error.UpdateComment"], MessageType.Error);
        }
    }

    private void EditComment(BlogComment comment)
    {
        var url = NavigateUrl(PageState.Page.Path, Utilities.AddUrlParameters(comment.Blog.BlogId)) + $"?comment={comment.BlogCommentId}&created={comment.CreatedOn.ToString("yyyyMMddHHmmssfff")}";
        NavigationManager.NavigateTo(url);
    }

    private async Task DeleteComment(BlogComment comment)
    {
        try
        {
            await BlogCommentService.DeleteBlogCommentAsync(comment.BlogCommentId, comment.BlogId, ModuleState.ModuleId);
            await logger.LogInformation("Blog Comment Deleted {BlogComment}", comment);
            await GetComments();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Blog Comment {BlogComment} {Error}", comment, ex.Message);
            AddModuleMessage(Localizer["Error.DeleteComment"], MessageType.Error);
        }
    }

    private async Task DeleteAll()
    {
        try
        {
            foreach (var comment in _comments)
            {
                await BlogCommentService.DeleteBlogCommentAsync(comment.BlogCommentId, comment.BlogId, ModuleState.ModuleId);
            }
            await logger.LogInformation("Unpublished Blog Comments Deleted");
            AddModuleMessage(Localizer["Success.DeleteAll"], MessageType.Success);
            await GetComments();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Unpublished Blog Comments {Error}", ex.Message);
            AddModuleMessage(Localizer["Error.DeleteAll"], MessageType.Error);
        }
    }

}
